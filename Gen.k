Import IO
Import Approx
Import Math

Package Gen {
	Signal(sig) {
		;; Acts as a signal clock generator for all the generators. By default,
		;; 'sig' is resampled to the audio clock. You can use 'With-Binding' to
		;; override the signal clock. For example, `With-Binding(":Gen:Signal" Control:Signal { Gen:Sin(440) })`
		;; generates a control rate sinusoidal oscillator

		Audio:Signal(sig)
	}

	Cycles-per-Sample(freq) {
		;; Converts 'freq'uency in herts to Cycles-per-Sample according
		;; to the firing rate of 'Gen:Signal'. The output is also resampled
		;; according to 'Gen:Signal'.
		Signal(freq * (#1 / Rate-of(Signal(0))))
	}

	Phasor(freq) {
		;; Generates a periodic ramp signal in the range [0,1]. The period
		;; of the ramp is 'freq' Hz, sampled at the clock generated by
		;; 'Gen:Signal'.

		state = Fraction(z-1(state + Cycles-per-Sample(freq)))

		state
	}

	Package Shape {
		Saw(phase) {
			;; Converts a phasor output to a naive unipolar sawtooth wave with
			;; upward edges.
			#1 - phase
		}

		Saw-(phase) {
			;; Converts a phasor output to a naive unipolar sawtooth wave with
			;; downward edges
			phase
		}

		Triangle(phase) {
			;; Converts a phasor output to a naive unipolar triangular wave
			#2 * Abs(Fraction(phase + #0.5) - #0.5)
		}

		Pulse(width) {
			;; Makes a waveshaper for a naive rectangular pulse with
			;; width ranging from 0 to 1.
			Pulse = phase => Coerce(phase #1) & (phase < width)
		}
	}

	Osc(shape-fn freq) {
		;; Produces a signal by waveshaping the output of a
		;; phasor at 'frequency' by 'shape-fn', such as in
		;; Osc(440 Shape:Triangle). The wave-shaped output
		;; from the range [0,1] is rescaled to the bipolar
		;; range of [-1,1].
		shape-fn(Phasor(freq)) * #2 - #1
	}

	Osc(shape-fn freq maximum) #[Extend] {
		;; Produces a signal by waveshaping the output of a
		;; phasor at 'frequency' by 'shape-fn', such as in
		;; Osc(440 Shape:Triangle). The output is scaled to
		;; the unipolar range of [0, maximum]
		shape-fn(Phasor(freq)) * maximum
	}

	Osc(shape-fn freq minimum maximum) #[Extend] {
		;; Produces a signal by waveshaping the output of a
		;; phasor at 'frequency' by 'shape-fn', such as in
		;; Osc(440 Shape:Triangle). The output is scaled to
		;; the range of [minimum, maximum]
		range = maximum - minimum
		minimum + range * shape-fn(Phasor(freq))
	}

	Saw(freq) {
		;; Produces a bipolar naive sawtooth waveform
		;; with upward edges
		Osc(Shape:Saw freq)
	}

	Saw-(freq) {
		;; Produces a bipolar naive sawtooth waveform
		;; with downward edges
		Osc(Shape:Saw- freq)
	}

	Tri(freq) {
		;; Produces a bipolar naive triangular waveform
		Osc(Shape:Triangle freq)
	}

	Pulse(freq width) {
		;; Produces a bipolar naive pulse waveform with
		;; 'width' in the range of [0,1].
		Osc(Shape:Pulse(width) freq)
	}

	Saw(freq offset) #[Extend] {
		;; Produces a bipolar naive sawtooth waveform
		;; with upward edges and a phase offset of [0,1]
		;; in proportion to the waveform period.
		Osc(w => Shape:Saw(Fraction(w + offset)) freq)
	}

	Saw-(freq offset) #[Extend] {
		;; Produces a bipolar naive sawtooth waveform
		;; with downward edges and a phase offset of [0,1]
		;; in proportion to the waveform period.
		Osc(w => Shape:Saw-(Fraction(w + offset)) freq)
	}

	Tri(freq offset) #[Extend] {
		;; Produces a bipolar naive triangular waveform
		;; with a phase offset of [0,1] in proportion to
		;; the waveform period.
		Osc(w => Shape:Triangle(Fraction(w + offset)) freq)
	}

	Pulse(freq width offset) #[Extend] {
		;; Produces a bipolar naive pulse waveform with
		;; 'width' in the range of [0,1], with a phase offset of [0,1]
		;; in proportion to the waveform period.
		p = Shape:Pulse(width)
		Osc(w => p(Fraction(w + offset)) freq)
	}

	Sin(freq) {
		;; Produces a polynomial sinusoid waveform.
		Osc(w => Approx:Cosine-Shape(Abs(w - #0.5) #5) freq)
	}

	Sin(freq offset) #[Extend] {
		;; Produces a polynomial sinusoid waveform with a phase 'offset'
		;; against a cosine wave, measured in periods of the waveform.
		Osc(w => Approx:Cosine-Shape(Abs(Fraction(w + offset) - #0.5)
									 #5)
			freq)
	}

	Slower(factor fn) {
		;; Function 'fn' is evaluated in a context where all the
		;; signal sources in the Gen package update at a rate
		;; that is slower by 'factor' in comparison to the current one.

		current-signal = Signal

		With-Binding(":Gen:Signal" {
			new-tick = Reactive:Downsample(current-signal(0) factor)
			Reactive:Resample(arg new-tick)
		} fn)
	}

	Faster(factor fn) {
		;; Function 'fn' is evaluated in a context where all the
		;; signal sources in the Gen package update at a rate
		;; that is faster by 'factor' in comparison to the current one.

		current-signal = Signal

		With-Binding(":Gen:Signal" {
			new-tick = Reactive:Upsample(current-signal(0) factor)
			Reactive:Resample(arg new-tick)
		} fn)
	}
}